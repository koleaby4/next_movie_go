// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const getUser = `-- name: GetUser :one
select id, email, auth_token, expiry
from users
where email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AuthToken,
		&i.Expiry,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (email, auth_token, expiry)
VALUES ($1, $2, NOW() + INTERVAL '24 hours') ON CONFLICT (email)
DO
UPDATE SET auth_token = $2, expiry = NOW() + INTERVAL '24 hours'
    RETURNING id, email, auth_token, expiry
`

func (q *Queries) UpsertUser(ctx context.Context, email string, authToken string) (User, error) {
	row := q.db.QueryRow(ctx, upsertUser, email, authToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AuthToken,
		&i.Expiry,
	)
	return i, err
}
