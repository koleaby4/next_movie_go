// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movieswatchedbyuser.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const addMovieWatchedByUser = `-- name: AddMovieWatchedByUser :execresult
insert into movies_watched_by_user (user_id, movie_id, experience_stars)
values ($1, $2, $3)
`

type AddMovieWatchedByUserParams struct {
	UserID          int
	MovieID         int
	ExperienceStars int
}

func (q *Queries) AddMovieWatchedByUser(ctx context.Context, arg AddMovieWatchedByUserParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, addMovieWatchedByUser, arg.UserID, arg.MovieID, arg.ExperienceStars)
}

const getMoviesWatchedByUser = `-- name: GetMoviesWatchedByUser :many
select user_id, movie_id, experience_stars
from movies_watched_by_user
where user_id = $1
`

func (q *Queries) GetMoviesWatchedByUser(ctx context.Context, userID int) ([]MoviesWatchedByUser, error) {
	rows, err := q.db.Query(ctx, getMoviesWatchedByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoviesWatchedByUser
	for rows.Next() {
		var i MoviesWatchedByUser
		if err := rows.Scan(&i.UserID, &i.MovieID, &i.ExperienceStars); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMovieWatchedByUser = `-- name: RemoveMovieWatchedByUser :exec
delete
from movies_watched_by_user
where user_id = $1
  and movie_id = $2
`

func (q *Queries) RemoveMovieWatchedByUser(ctx context.Context, userID int, movieID int) error {
	_, err := q.db.Exec(ctx, removeMovieWatchedByUser, userID, movieID)
	return err
}

const updateMovieWatchedByUser = `-- name: UpdateMovieWatchedByUser :exec
update movies_watched_by_user
set experience_stars = $1
where user_id = $2
  and movie_id = $3
`

func (q *Queries) UpdateMovieWatchedByUser(ctx context.Context, experienceStars int, userID int, movieID int) error {
	_, err := q.db.Exec(ctx, updateMovieWatchedByUser, experienceStars, userID, movieID)
	return err
}
