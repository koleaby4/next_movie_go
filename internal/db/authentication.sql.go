// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: authentication.sql

package db

import (
	"context"
)

const matches = `-- name: Matches :one
select count(*) as matches
from authentication
where user_id = $1
    and code = $2
    and expires > now()
limit 1
`

type AuthDetail struct {
	UserID int
	Code   string
}

func (q *Queries) Matches(ctx context.Context, arg AuthDetail) (bool, error) {
	row := q.db.QueryRow(ctx, matches, arg.UserID, arg.Code)
	var matches int64
	err := row.Scan(&matches)
	return matches > 0, err
}

const upsert = `-- name: Upsert :exec
INSERT INTO authentication (user_id, code, expires)
VALUES ($1, $2, NOW() + INTERVAL '24 hours')
ON CONFLICT (user_id)
    DO UPDATE SET code = $2, expires = NOW() + INTERVAL '24 hours'
`

func (q *Queries) Upsert(ctx context.Context, arg AuthDetail) error {
	_, err := q.db.Exec(ctx, upsert, arg.UserID, arg.Code)
	return err
}
