// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movie.sql

package db

import (
	"context"
	"github.com/jackc/pgx/v5/pgconn"
)

const getLastKnownReleaseDate = `-- name: GetLastKnownReleaseDate :one
select max(release_date) as release_date
from movies
`

func (q *Queries) GetLastKnownReleaseDate(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, getLastKnownReleaseDate)
	var release_date interface{}
	err := row.Scan(&release_date)
	return release_date, err
}

const getMovie = `-- name: GetMovie :one
select id,
       title,
       release_date,
       overview,
       rating,
       poster_url,
       trailer_url,
       raw_data
from movies
where id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id int) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReleaseDate,
		&i.Overview,
		&i.Rating,
		&i.PosterUrl,
		&i.TrailerUrl,
		&i.RawData,
	)
	return i, err
}

const insertMovie = `-- name: InsertMovie :execresult
insert into movies (id, title, release_date, overview, rating, poster_url, trailer_url, raw_data)
values ($1, $2, $3, $4, $5, $6, $7, $8)
on conflict (id) do nothing
`

func (q *Queries) InsertMovie(ctx context.Context, arg Movie) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertMovie,
		arg.ID,
		arg.Title,
		arg.ReleaseDate,
		arg.Overview,
		arg.Rating,
		arg.PosterUrl,
		arg.TrailerUrl,
		arg.RawData,
	)
}

const listMovies = `-- name: ListMovies :many
select id,
       title,
       release_date,
       overview,
       rating,
       poster_url,
       trailer_url,
       raw_data
from movies
order by release_date desc
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ReleaseDate,
			&i.Overview,
			&i.Rating,
			&i.PosterUrl,
			&i.TrailerUrl,
			&i.RawData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
