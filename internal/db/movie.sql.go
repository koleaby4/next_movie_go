// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movie.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const createMovie = `-- name: CreateMovie :execresult
insert into movies (id, title) values($1, $2)
`

type CreateMovieParams struct {
	ID    string
	Title string
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createMovie, arg.ID, arg.Title)
}

const deleteMovie = `-- name: DeleteMovie :exec
delete from movies where id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
select id, title from movies where id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id string) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const listMovies = `-- name: ListMovies :many
select id, title
from movies
order by id
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchMovies = `-- name: SearchMovies :many
select id, title from movies
where title like $1
`

func (q *Queries) SearchMovies(ctx context.Context, title string) ([]Movie, error) {
	rows, err := q.db.Query(ctx, searchMovies, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :exec
update movies
set title = $1 where id = $1
`

func (q *Queries) UpdateMovie(ctx context.Context, title string) error {
	_, err := q.db.Exec(ctx, updateMovie, title)
	return err
}
